package com.controlart.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.controlart.dao.factory.ConnFactory;
import com.controlart.dao.utils.DaoUtils;
import com.controlart.transfer.PessoaT;

public class PessoaDao {
	private Connection connection;

	private static final String SQL_CONSULT_ALL_FOR_VIEW = "SELECT tp.id_pessoa, tp.nm_pessoa, tp.in_ativo FROM tb_pessoa tp ORDER BY tp.nm_pessoa";
	private static final String SQL_CONSULT_ALL_FOR_VIEW_NO_USERS = "SELECT tp.id_pessoa, tp.nm_pessoa, tp.in_ativo FROM tb_pessoa tp WHERE tp.in_ativo = 1 AND tp.id_pessoa NOT IN (SELECT tu.id_pessoa FROM tb_usuario tu WHERE tu.in_ativo = 1)";
	private static final String SQL_CONSULT_ALL_FOR_VIEW_USERS = "SELECT tp.id_pessoa, tp.nm_pessoa, tp.in_ativo FROM tb_pessoa tp WHERE tp.id_pessoa IN (SELECT tu.id_pessoa FROM tb_usuario tu)";
	private static final String SQL_CONSULT_ALL = "SELECT tp.* FROM tb_pessoa tp ORDER BY tp.nm_pessoa";
	private static final String SQL_CONSULT_LAST_ID = "SELECT MAX(tp.id_pessoa) as id_pessoa FROM tb_pessoa tp";
	private static final String SQL_INSERT = "INSERT INTO tb_pessoa (id_tipo_pessoa, nm_pessoa, nr_fone, ds_email, nm_rua, nr_imovel, nm_bairro, nm_cidade, in_ativo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
	private static final String SQL_UPDATE = "UPDATE tb_pessoa SET id_tipo_pessoa = ?, nm_pessoa = ?, nr_fone = ?, ds_email = ?, nm_rua = ?, nr_imovel = ?, nm_bairro = ?, nm_cidade = ?, in_ativo = ? WHERE id_pessoa = ?";
	private static final String SQL_INACTIVATE = "UPDATE tb_pessoa SET in_ativo = 0 WHERE id_pessoa = ?";

	public PessoaDao() throws SQLException {
		connection = ConnFactory.getConnection();
	}

	/*
	 * Objetivo: Método utilizado para consultar todas as Pessoas (PessoaT) do
	 * sistema.
	 * 
	 * @param
	 * 
	 * @return List<PessoaT>. Obs: Apenas as informações utilizadas por
	 * Converters e SelecItems serão retornadas.
	 * 
	 * @throws SQLException.
	 */

	public List<PessoaT> consultAllForView() throws SQLException {
		PreparedStatement pStmt = null;
		ResultSet rs = null;

		try {
			pStmt = connection.prepareStatement(SQL_CONSULT_ALL_FOR_VIEW);

			rs = pStmt.executeQuery();

			return resultsetToObjectA(rs);
		} finally {
			DaoUtils.closeStatementAndResultSet(pStmt, rs);
			DaoUtils.closeConnection(connection);
		}
	}

	/*
	 * Objetivo: Método utilizado para consultar todas as Pessoas (PessoaT) do
	 * sistema que não possuem Usuário (UsuarioT).
	 * 
	 * @param
	 * 
	 * @return List<PessoaT>. Obs: Apenas as informações utilizadas por
	 * Converters e SelecItems serão retornadas.
	 * 
	 * @throws SQLException.
	 */

	public List<PessoaT> consultAllForViewNoUsers() throws SQLException {
		PreparedStatement pStmt = null;
		ResultSet rs = null;

		try {
			pStmt = connection
					.prepareStatement(SQL_CONSULT_ALL_FOR_VIEW_NO_USERS);

			rs = pStmt.executeQuery();

			return resultsetToObjectA(rs);
		} finally {
			DaoUtils.closeStatementAndResultSet(pStmt, rs);
			DaoUtils.closeConnection(connection);
		}
	}

	/*
	 * Objetivo: Método utilizado para consultar todas as Pessoas (PessoaT) do
	 * sistema que possuem Usuário (UsuarioT).
	 * 
	 * @param
	 * 
	 * @return List<PessoaT>. Obs: Apenas as informações utilizadas por
	 * Converters e SelecItems serão retornadas.
	 * 
	 * @throws SQLException.
	 */

	public List<PessoaT> consultAllForViewUsers() throws SQLException {
		PreparedStatement pStmt = null;
		ResultSet rs = null;

		try {
			pStmt = connection.prepareStatement(SQL_CONSULT_ALL_FOR_VIEW_USERS);

			rs = pStmt.executeQuery();

			return resultsetToObjectA(rs);
		} finally {
			DaoUtils.closeStatementAndResultSet(pStmt, rs);
			DaoUtils.closeConnection(connection);
		}
	}

	/*
	 * Objetivo: Método utilizado para consultar todas as Pessoas (PessoaT) do
	 * sistema.
	 * 
	 * @param
	 * 
	 * @return List<PessoaT>. Obs: Todas as informações serão retornadas.
	 * 
	 * @throws SQLException.
	 */

	public List<PessoaT> consultAll() throws SQLException {
		PreparedStatement pStmt = null;
		ResultSet rs = null;

		try {
			pStmt = connection.prepareStatement(SQL_CONSULT_ALL);

			rs = pStmt.executeQuery();

			return resultsetToObjectB(rs);
		} finally {
			DaoUtils.closeStatementAndResultSet(pStmt, rs);
			DaoUtils.closeConnection(connection);
		}
	}

	/*
	 * Objetivo: Método utilizado para consultar o Identificador (id) da última
	 * Pessoa (PessoaT) cadastrada no sistema.
	 * 
	 * @param
	 * 
	 * @return int. Obs: Apenas o identificador da Pessoa (PessoaT) será
	 * retornado.
	 * 
	 * @throws SQLException.
	 */

	public int consultLastId() throws SQLException {
		PreparedStatement pStmt = null;
		ResultSet rs = null;

		try {
			pStmt = connection.prepareStatement(SQL_CONSULT_LAST_ID);

			rs = pStmt.executeQuery();

			return resultsetToObjectTC(rs);
		} finally {
			DaoUtils.closeStatementAndResultSet(pStmt, rs);
		}
	}

	/*
	 * Objetivo: Método utilizado para mapear dados de um ResultSet (Que
	 * armazena resultados de consultas em uma Base de Dados) em informações de
	 * Pessoa (PessoaT).
	 * 
	 * @param ResultSet.
	 * 
	 * @return List<PessoaT>. Obs: Apenas as informações utilizadas por
	 * Converters e SelecItems serão retornadas.
	 * 
	 * @throws SQLException.
	 */

	private List<PessoaT> resultsetToObjectA(ResultSet rs) throws SQLException {
		List<PessoaT> listaPessoaT = new ArrayList<PessoaT>(0);

		while (rs.next()) {
			PessoaT pessoaT = new PessoaT();

			pessoaT.setIdPessoa(rs.getInt("ID_PESSOA"));
			pessoaT.setNome(rs.getString("NM_PESSOA"));
			pessoaT.setAtivo(rs.getInt("IN_ATIVO"));

			listaPessoaT.add(pessoaT);
		}

		return listaPessoaT;
	}

	/*
	 * Objetivo: Método utilizado para mapear dados de um ResultSet (Que
	 * armazena resultados de consultas em uma Base de Dados) em informações de
	 * Pessoa (PessoaT).
	 * 
	 * @param ResultSet.
	 * 
	 * @return List<PessoaT>. Obs: Todas as informações serão retornadas.
	 * 
	 * @throws SQLException.
	 */

	private List<PessoaT> resultsetToObjectB(ResultSet rs) throws SQLException {
		List<PessoaT> listaPessoaT = new ArrayList<PessoaT>(0);

		while (rs.next()) {
			PessoaT pessoaT = new PessoaT();

			pessoaT.setIdPessoa(rs.getInt("ID_PESSOA"));
			pessoaT.setTipoPessoa(rs.getInt("ID_TIPO_PESSOA"));
			pessoaT.setNome(rs.getString("NM_PESSOA"));
			pessoaT.setFone(rs.getString("NR_FONE"));
			pessoaT.setEmail(rs.getString("DS_EMAIL"));
			pessoaT.setLogradouro(rs.getString("NM_RUA"));
			pessoaT.setNumero(rs.getString("NR_IMOVEL"));
			pessoaT.setBairro(rs.getString("NM_BAIRRO"));
			pessoaT.setCidade(rs.getString("NM_CIDADE"));
			pessoaT.setAtivo(rs.getInt("IN_ATIVO"));

			listaPessoaT.add(pessoaT);
		}

		return listaPessoaT;
	}

	/*
	 * Objetivo: Método utilizado para mapear dados de um ResultSet (Que
	 * armazena resultados de consultas em uma Base de Dados) em informações de
	 * Pessoa (PessoaT).
	 * 
	 * @param ResultSet.
	 * 
	 * @return int. Obs: Apenas o Identificador (id) da Pessoa (PessoaT) será
	 * retornado.
	 * 
	 * @throws SQLException.
	 */

	private int resultsetToObjectTC(ResultSet rs) throws SQLException {
		PessoaT pessoaT = new PessoaT();

		while (rs.next()) {
			pessoaT.setIdPessoa(rs.getInt("ID_PESSOA"));
		}

		return pessoaT.getIdPessoa();
	}

	public void insert(PessoaT pessoaT) throws SQLException {
		PreparedStatement pStmt = null;

		try {
			pStmt = connection.prepareStatement(SQL_INSERT);
			pStmt.setObject(1, pessoaT.getIdPessoa());
			pStmt.setObject(2, pessoaT.getNome());
			pStmt.setObject(3, pessoaT.getFone());
			pStmt.setObject(4, pessoaT.getEmail());
			pStmt.setObject(5, pessoaT.getLogradouro());
			pStmt.setObject(6, pessoaT.getNumero());
			pStmt.setObject(7, pessoaT.getBairro());
			pStmt.setObject(8, pessoaT.getCidade());
			pStmt.setObject(9, pessoaT.getAtivo());

			pStmt.execute();

			pessoaT.setId(consultLastId());
		} finally {
			DaoUtils.closePreparedStatement(pStmt);
			DaoUtils.closeConnection(connection);
		}
	}

	public void update(PessoaT pessoaT) throws SQLException {
		PreparedStatement pStmt = null;

		try {
			pStmt = connection.prepareStatement(SQL_UPDATE);
			pStmt.setObject(1, pessoaT.getTipoPessoa());
			pStmt.setObject(2, pessoaT.getNome());
			pStmt.setObject(3, pessoaT.getFone());
			pStmt.setObject(4, pessoaT.getEmail());
			pStmt.setObject(5, pessoaT.getLogradouro());
			pStmt.setObject(6, pessoaT.getNumero());
			pStmt.setObject(7, pessoaT.getBairro());
			pStmt.setObject(8, pessoaT.getCidade());
			pStmt.setObject(9, pessoaT.getAtivo());
			pStmt.setObject(10, pessoaT.getId());

			pStmt.executeUpdate();
		} finally {
			DaoUtils.closePreparedStatement(pStmt);
			DaoUtils.closeConnection(connection);
		}
	}

	public void inactivate(PessoaT pessoaT) throws SQLException {
		PreparedStatement pStmt = null;

		try {
			pStmt = connection.prepareStatement(SQL_INACTIVATE);
			pStmt.setObject(1, pessoaT.getId());

			pStmt.executeUpdate();
		} finally {
			DaoUtils.closePreparedStatement(pStmt);
			DaoUtils.closeConnection(connection);
		}
	}
}
