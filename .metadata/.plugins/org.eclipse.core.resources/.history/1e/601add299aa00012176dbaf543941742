package com.controlart.bean;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.model.SelectItem;

import com.controlart.bean.utils.BeanUtils;
import com.controlart.dao.AcervoDao;
import com.controlart.dao.PecaDao;
import com.controlart.dao.TipoTransacaoDao;
import com.controlart.dao.TransacaoDao;
import com.controlart.transfer.AcervoT;
import com.controlart.transfer.PecaT;
import com.controlart.transfer.TipoTransacaoT;
import com.controlart.transfer.TransacaoT;

@ManagedBean(name = "transacaoBean")
@ViewScoped
public class TransacaoBean extends ControlArtBean {

	private static final long serialVersionUID = 1L;

	private TransacaoT transacao;
	private List<TransacaoT> listTransacao;
	private boolean novoRegistro;

	private List<SelectItem> listPeca;
	private List<SelectItem> listTipoTransacao;
	private List<SelectItem> listAcervo;

	private HashMap<Integer, String> hashPeca;
	private HashMap<Integer, String> hashTipoTransacao;
	private HashMap<Integer, String> hashAcervo;

	public TransacaoBean() {
		listTransacao = new ArrayList<TransacaoT>(0);

		try {
			clearAction();
			consultAction();
			consultPeca();
			consultTipoTransacao();
			consultAcervo();
		} catch (SQLException sql) {
			sql.printStackTrace();
			addFacesMessage(getObjectFromBundle("msErroGenerico"), null,
					BeanUtils.SEVERITY_FATAL);
		}
	}

	private void clearAction() {
		transacao = new TransacaoT();
	}

	private void consultAction() throws SQLException {
		TransacaoDao transacaoDao = new TransacaoDao();

		listTransacao = transacaoDao.consultAll();
	}

	private void consultPeca() throws SQLException {
		PecaDao pecaDao = new PecaDao();

		List<PecaT> _listPeca = pecaDao.consultAllForView();

		listPeca = new ArrayList<SelectItem>(0);
		hashPeca = new HashMap<Integer, String>(0);

		for (PecaT pecaT : _listPeca) {
			if (pecaT.getAtivo() == 1) {
				listPeca.add(new SelectItem(pecaT.getId(), pecaT.getNome()));
			}

			hashPeca.put(pecaT.getId(), pecaT.getNome());
		}
	}

	private void consultTipoTransacao() throws SQLException {
		TipoTransacaoDao tipoTransacaoDao = new TipoTransacaoDao();
		List<TipoTransacaoT> _listTipoTransacao = tipoTransacaoDao
				.consultAllForView();

		hashTipoTransacao = new HashMap<Integer, String>(0);

		for (TipoTransacaoT tipoTransacaoT : _listTipoTransacao) {
			hashTipoTransacao.put(tipoTransacaoT.getId(),
					tipoTransacaoT.getNome());
		}
	}

	/*
	 * Objetivo: Método que preenche combo com Tipos de Transação de Entrada (E)
	 * que não incluem Devolução (Tanto Empréstimo como Consignação). Útil para
	 * criar novas Transações.
	 * 
	 * @param
	 * 
	 * @return
	 * 
	 * @throws SQLException
	 */

	private void consultTipoTransacaoNovo() throws SQLException {
		TipoTransacaoDao tipoTransacaoDao = new TipoTransacaoDao();
		List<TipoTransacaoT> _listTipoTransacao = tipoTransacaoDao
				.consultAllForViewNoDev();

		listTipoTransacao = new ArrayList<SelectItem>(0);

		for (TipoTransacaoT tipoTransacaoT : _listTipoTransacao) {
			listTipoTransacao.add(new SelectItem(tipoTransacaoT.getId(),
					tipoTransacaoT.getNome()));
		}
	}

	/*
	 * Objetivo: Método que preenche combo com Tipos de Transação de Entrada (E)
	 * que incluem Devolução (Tanto Empréstimo como Consignação). Útil para
	 * editar/visualizar Transações.
	 * 
	 * @param
	 * 
	 * @return
	 * 
	 * @throws SQLException
	 */

	private void consultTipoTransacaoEditar() throws SQLException {
		TipoTransacaoDao tipoTransacaoDao = new TipoTransacaoDao();
		List<TipoTransacaoT> _listTipoTransacao = tipoTransacaoDao
				.consultAllForView();

		listTipoTransacao = new ArrayList<SelectItem>(0);

		for (TipoTransacaoT tipoTransacaoT : _listTipoTransacao) {
			listTipoTransacao.add(new SelectItem(tipoTransacaoT.getId(),
					tipoTransacaoT.getNome()));
		}
	}

	private void consultAcervo() throws SQLException {
		AcervoDao acervoDao = new AcervoDao();

		List<AcervoT> _listAcervo = acervoDao.consultAllForView();

		listAcervo = new ArrayList<SelectItem>(0);
		hashAcervo = new HashMap<Integer, String>(0);

		for (AcervoT acervoT : _listAcervo) {
			if (acervoT.getAtivo() == 1) {
				listAcervo.add(new SelectItem(acervoT.getId(), acervoT
						.getNome()));
			}

			hashAcervo.put(acervoT.getId(), acervoT.getNome());
		}
	}

	public void definirNovo() {
		novoRegistro = true;

		clearAction();

		try {
			consultTipoTransacaoNovo();
		} catch (SQLException sql) {
			sql.printStackTrace();
			addFacesMessage(getObjectFromBundle("msErroGenerico"), null,
					BeanUtils.SEVERITY_FATAL);
		}
	}

	public void definirEditar() {
		novoRegistro = false;

		try {
			transacao = (TransacaoT) ((TransacaoT) getFacesObject("listaTransacao"))
					.clone();

			consultTipoTransacaoEditar();
		} catch (CloneNotSupportedException cns) {
			cns.printStackTrace();
			addFacesMessage(getObjectFromBundle("msErroGenerico"), null,
					BeanUtils.SEVERITY_FATAL);
		} catch (SQLException sql) {
			sql.printStackTrace();
			addFacesMessage(getObjectFromBundle("msErroGenerico"), null,
					BeanUtils.SEVERITY_FATAL);
		}
	}

	public void saveAction() {
		if (novoRegistro) {
			insertAction();
		} else {
			updateAction();
		}
	}

	public void insertAction() {
		try {
			TransacaoDao transacaoDao = new TransacaoDao();
			transacaoDao.insert(transacao);

			definirNovo();
			consultAction();

			addFacesMessage(getObjectFromBundle("msRegistroInserido"), null,
					BeanUtils.SEVERITY_INFO);
		} catch (SQLException sql) {
			sql.printStackTrace();
		}
	}

	public void updateAction() {
		try {
			TransacaoDao transacaoDao = new TransacaoDao();
			transacaoDao.update(transacao);

			consultAction();

			addFacesMessage(getObjectFromBundle("msRegistroAtualizado"), null,
					BeanUtils.SEVERITY_INFO);
		} catch (SQLException sql) {
			sql.printStackTrace();
		}
	}

	/*
	 * Objetivo: Método utilizado por Converters para Transformar
	 * Identificadores (id's) em representações String (nomes).
	 * 
	 * @param key.
	 * 
	 * @return String.
	 * 
	 * @throws
	 */

	public String getPeca(int key) {
		return hashPeca.get(key);
	}

	/*
	 * Objetivo: Método utilizado por Converters para Transformar
	 * Identificadores (id's) em representações String (nomes).
	 * 
	 * @param key.
	 * 
	 * @return String.
	 * 
	 * @throws
	 */

	public String getTipoTransacao(int key) {
		return hashTipoTransacao.get(key);
	}

	/*
	 * Objetivo: Método utilizado por Converters para Transformar
	 * Identificadores (id's) em representações String (nomes).
	 * 
	 * @param key.
	 * 
	 * @return String.
	 * 
	 * @throws
	 */

	public String getAcervo(int key) {
		return hashAcervo.get(key);
	}

	/*
	 * Objetivo: Método utilizado para atualizar as Peças disponíveis para uma
	 * Transação, dado a escolha de um Acervo Destino.
	 * 
	 * @param
	 * 
	 * @return
	 * 
	 * @throws
	 */

	public void updatePeca() {
		if (transacao.getAcervoDestino() != 0) {
			PecaT pecaT = new PecaT();
			pecaT.setId(transacao.getAcervo());

			try {
				PecaDao pecaDao = new PecaDao();
				pecaT.setAcervo(pecaDao.consultIdAcervo(pecaT));

				transacao.setAcervoOrigem(pecaT.getAcervo());
			} catch (SQLException sql) {
				sql.printStackTrace();
				addFacesMessage(getObjectFromBundle("msErroGenerico"), null,
						BeanUtils.SEVERITY_FATAL);
			}
		} else {
			transacao.setAcervoOrigem(0);
		}
	}

	/*
	 * Objetivo: Método utilizado para atualizar o Acervo Origem de uma
	 * Transação, dado a escolha de uma Peça.
	 * 
	 * @param
	 * 
	 * @return
	 * 
	 * @throws
	 */

	public void updateAcervoOrigem() {
		if (transacao.getPeca() != 0) {
			PecaT pecaT = new PecaT();
			pecaT.setId(transacao.getPeca());

			try {
				PecaDao pecaDao = new PecaDao();
				pecaT.setAcervo(pecaDao.consultIdAcervo(pecaT));

				transacao.setAcervoOrigem(pecaT.getAcervo());
			} catch (SQLException sql) {
				sql.printStackTrace();
				addFacesMessage(getObjectFromBundle("msErroGenerico"), null,
						BeanUtils.SEVERITY_FATAL);
			}
		} else {
			transacao.setAcervoOrigem(0);
		}
	}

	public TransacaoT getTransacao() {
		return transacao;
	}

	public void setTransacao(TransacaoT transacao) {
		this.transacao = transacao;
	}

	public List<TransacaoT> getListTransacao() {
		return listTransacao;
	}

	public void setListTransacao(List<TransacaoT> listTransacao) {
		this.listTransacao = listTransacao;
	}

	public boolean isNovoRegistro() {
		return novoRegistro;
	}

	public void setNovoRegistro(boolean novoRegistro) {
		this.novoRegistro = novoRegistro;
	}

	public List<SelectItem> getListTipoTransacao() {
		return listTipoTransacao;
	}

	public void setListTipoTransacao(List<SelectItem> listTipoTransacao) {
		this.listTipoTransacao = listTipoTransacao;
	}

	public List<SelectItem> getListAcervo() {
		return listAcervo;
	}

	public void setListAcervo(List<SelectItem> listAcervo) {
		this.listAcervo = listAcervo;
	}

	public HashMap<Integer, String> getHashTipoTransacao() {
		return hashTipoTransacao;
	}

	public void setHashTipoTransacao(HashMap<Integer, String> hashTipoTransacao) {
		this.hashTipoTransacao = hashTipoTransacao;
	}

	public HashMap<Integer, String> getHashAcervo() {
		return hashAcervo;
	}

	public void setHashAcervo(HashMap<Integer, String> hashAcervo) {
		this.hashAcervo = hashAcervo;
	}

	public List<SelectItem> getListPeca() {
		return listPeca;
	}

	public void setListPeca(List<SelectItem> listPeca) {
		this.listPeca = listPeca;
	}

	public HashMap<Integer, String> getHashPeca() {
		return hashPeca;
	}

	public void setHashPeca(HashMap<Integer, String> hashPeca) {
		this.hashPeca = hashPeca;
	}

}
