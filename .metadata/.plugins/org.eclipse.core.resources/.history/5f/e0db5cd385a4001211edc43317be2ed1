package com.controlart.bean;

import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

import com.controlart.bean.utils.BeanUtils;
import com.controlart.dao.UsuariosDao;
import com.controlart.transfer.UsuarioT;

@ManagedBean(name = "alterarSenhaBean")
@ViewScoped
public class AlterarSenhaBean extends ControlArtBean {

	private static final long serialVersionUID = 1L;

	private UsuarioT usuario;

	public AlterarSenhaBean() {
		clearAction();
	}

	private void clearAction() {
		usuario = new UsuarioT();
	}

	public void updateAction() {
		try {
			String senhaAtual = BeanUtils.encryptPassword(usuario.getSenha());

			if (!(senhaAtual.equals(getUsuarioLogado().getSenha()))) {
				addFacesMessage(getObjectFromBundle("msSenhaAtualInvalida"),
						null, BeanUtils.SEVERITY_WARN);

				return;
			}

			if (usuario.getNovaSenha().equals(usuario.getConfirmNovaSenha())) {
				usuario.setIdPessoa(getUsuarioLogado().getIdPessoa());
				usuario.setCdSenha(BeanUtils.encryptPassword(usuario
						.getNovaSenha()));

				UsuariosDao usuariosDao = new UsuariosDao();
				usuariosDao.updatePassword(usuario);

				getUsuarioLogado().setCdSenha(usuario.getCdSenha());

				addFacesMessage(getObjectFromBundle("msRegistroAtualizado"),
						null, BeanUtils.SEVERITY_INFO);
			} else {
				addFacesMessage(
						getObjectFromBundle("msNovaSenhaConfirmDiferem"), null,
						BeanUtils.SEVERITY_WARN);

				return;
			}

			clearAction();
		} catch (NoSuchAlgorithmException nsa) {
			nsa.printStackTrace();
			addFacesMessage(getObjectFromBundle("msErroGenerico"), null,
					BeanUtils.SEVERITY_ERROR);
		} catch (SQLException sql) {
			sql.printStackTrace();
			addFacesMessage(getObjectFromBundle("msErroGenerico"), null,
					BeanUtils.SEVERITY_ERROR);
		}
	}

	public UsuarioT getUsuario() {
		return usuario;
	}

	public void setUsuario(UsuarioT usuario) {
		this.usuario = usuario;
	}
}
