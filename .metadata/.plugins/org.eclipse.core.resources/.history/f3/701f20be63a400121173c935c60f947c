package com.controlart.bean.utils;

import java.io.File;
import java.math.BigDecimal;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.Normalizer;

import sun.misc.BASE64Encoder;

import com.controlart.dao.utils.DaoUtils;

public class BeanUtils {
	public static final String LOGIN_PAGE = "/login.xhtml";
	public static final String HOME_PAGE = "/home.xhtml";

	public static final String LOGGEDUSER_SESSION_ATTRIBUTE = "usuarioLogado";

	public static final int SEVERITY_ERROR = 1;
	public static final int SEVERITY_FATAL = 2;
	public static final int SEVERITY_INFO = 3;
	public static final int SEVERITY_WARN = 4;

	private static final String CRIPTOGRAPHY_ALGORITHM = "md5";

	public static final String RAISE_EXCEPTION_CODE = DaoUtils.RAISE_EXCEPTION_CODE;

	public static final String encryptPassword(String password)
			throws NoSuchAlgorithmException {
		MessageDigest md = MessageDigest.getInstance(CRIPTOGRAPHY_ALGORITHM);
		BASE64Encoder encoder = new BASE64Encoder();

		md.update(password.getBytes());

		return toHexCode(encoder.encode(md.digest()).getBytes());
	}

	private static final String toHexCode(byte[] passHash) {
		StringBuffer hexString = new StringBuffer();

		for (int i = 0; i < passHash.length; i++) {
			if ((0xff & passHash[i]) < 0x10)
				hexString.append("0"
						+ Integer.toHexString((0xFF & passHash[i])));
			else
				hexString.append(Integer.toHexString(0xFF & passHash[i]));
		}

		return hexString.toString();
	}

	public static final BigDecimal unformatCurrency(String formatedCurrency) {
		if (formatedCurrency == null || formatedCurrency.isEmpty()) {
			return null;
		} else {
			String currencyStr = formatedCurrency.replaceAll(".", "");
			currencyStr = formatedCurrency.replace(",", ".");

			BigDecimal currency = new BigDecimal(currencyStr);

			return currency;
		}
	}

	public static final String formatImageName(String name) {
		if (name == null || name.isEmpty()) {
			return null;
		} else {
			int barIndex = name.lastIndexOf(File.separator);

			if (barIndex == -1) {
				barIndex = 0;
			} else {
				barIndex = barIndex + 1;
			}

			int extensionIndex = name.lastIndexOf(".");

			String imageName = name.substring(barIndex, extensionIndex).trim()
					.toLowerCase();

			if (imageName.length() > 95) {
				imageName = imageName.substring(0, 96);
			}

			String imageExtension = name
					.substring(extensionIndex, name.length()).trim()
					.toLowerCase();

			String formatedImageName = Normalizer.normalize(imageName,
					Normalizer.Form.NFD);
			formatedImageName = formatedImageName.replaceAll("[^\\p{ASCII}]",
					"");
			formatedImageName = formatedImageName.replaceAll("[\\W]", "");

			formatedImageName = formatedImageName + imageExtension;

			return formatedImageName;
		}
	}

	public static final String formartPhone(String phone) {
		String formatedPhone = null;

		if (phone == null || phone.isEmpty()) {
			return formatedPhone;
		} else {
			String ddd = null;
			String prefix = null;
			String posfix = null;

			if (phone.length() == 10) {
				ddd = phone.substring(0, 2);
				prefix = phone.substring(2, 6);
				posfix = phone.substring(6, 10);

				formatedPhone = "(" + ddd + ")" + " " + prefix + "-" + posfix;

				return formatedPhone;
			} else {
				if (phone.length() == 11) {
					ddd = phone.substring(0, 2);
					prefix = phone.substring(2, 7);
					posfix = phone.substring(7, 11);

					formatedPhone = "(" + ddd + ")" + " " + prefix + "-"
							+ posfix;

					return formatedPhone;
				} else {
					return formatedPhone;
				}
			}
		}
	}

	public static final String unformatPhone(String formatedPhone) {
		String phone = null;

		if (formatedPhone == null) {
			return phone;
		} else {
			String[] charsToReplace = { "(", ")", " ", "-" };

			phone = formatedPhone;

			for (String string : charsToReplace) {
				phone = phone.replace(string, "");
			}

			return phone;
		}
	}
}
