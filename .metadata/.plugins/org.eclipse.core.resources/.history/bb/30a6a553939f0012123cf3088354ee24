package com.controlart.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.controlart.dao.factory.ConnFactory;
import com.controlart.dao.utils.DaoUtils;
import com.controlart.transfer.UsuarioT;

public class UsuariosDao {
	private Connection connection;

	private static final String SQL_CONSULT = "SELECT tu.id_usuario, tu.id_tipo_usuario, tu.id_pessoa, tu.ds_login, tu.ds_senha, tu.in_primeiro_acesso, tu.in_ativo, tp.id_tipo_pessoa, tp.nm_pessoa, tp.nr_fone, tp.ds_email, nm_rua, nr_imovel, nm_bairro, nm_cidade FROM tb_usuario tu JOIN tb_pessoa tp on tp.id_pessoa = tu.id_pessoa WHERE tu.ds_login = ? AND tu.ds_senha = ? AND tu.in_ativo = 1";
	private static final String SQL_CONSULT_ALL = "SELECT tu.id_usuario, tu.id_tipo_usuario, tu.id_pessoa, tu.ds_login, tu.in_ativo FROM tb_usuario tu ORDER BY tu.ds_login";
	private static final String SQL_INSERT = "INSERT INTO tb_usuario (id_tipo_usuario, id_pessoa, ds_login, ds_senha, in_ativo) VALUES (?, ?, ?, ?, ?)";
	private static final String SQL_UPDATE_PASSWORD = "UPDATE tb_usuario SET ds_senha = ? WHERE id_usuario = ?";
	private static final String SQL_UPDATE = "UPDATE tb_usuario SET ds_senha = ?, in_ativo = ? WHERE id_usuario = ?";
	private static final String SQL_INACTIVATE = "UPDATE tb_usuario SET in_ativo = 0 WHERE id_usuario = ?";

	public UsuariosDao() throws SQLException {
		connection = ConnFactory.getConnection();
	}

	/*
	 * Objetivo: Método utilizado para consultar um Usuário (UsuarioT) através
	 * de seu Login e Senha.
	 * 
	 * @param usuarioT (UsuarioT - dsLogin, cdSenha).
	 * 
	 * @return UsuarioT. Obs: As informações de Pessoa (PessoaT) deste Usuário
	 * também serão retornadas.
	 * 
	 * @throws SQLException.
	 */

	public UsuarioT consult(UsuarioT usuarioT) throws SQLException {
		PreparedStatement pStmt = null;
		ResultSet rs = null;

		try {
			pStmt = connection.prepareStatement(SQL_CONSULT);
			pStmt.setObject(1, usuarioT.getDsLogin());
			pStmt.setObject(2, usuarioT.getCdSenha());

			rs = pStmt.executeQuery();

			return resultsetToObjectA(rs);
		} finally {
			DaoUtils.closeStatementAndResultSet(pStmt, rs);
			DaoUtils.closeConnection(connection);
		}
	}

	/*
	 * Objetivo: Método utilizado para consultar todos os Usuário (UsuarioT) do
	 * sistema.
	 * 
	 * @param
	 * 
	 * @return List<UsuarioT>. Obs: As informações de Pessoa (PessoaT) destes
	 * Usuários não serão retornadas.
	 * 
	 * @throws SQLException.
	 */

	public List<UsuarioT> consultAll() throws SQLException {
		PreparedStatement pStmt = null;
		ResultSet rs = null;

		try {
			pStmt = connection.prepareStatement(SQL_CONSULT_ALL);

			rs = pStmt.executeQuery();

			return resultsetToObjectB(rs);
		} finally {
			DaoUtils.closeStatementAndResultSet(pStmt, rs);
			DaoUtils.closeConnection(connection);
		}
	}

	/*
	 * Objetivo: Método utilizado para mapear dados de um ResultSet (Que
	 * armazena resultados de consultas em uma Base de Dados) em informações de
	 * Usuário (UsuarioT).
	 * 
	 * @param ResultSet.
	 * 
	 * @return UsuarioT. As informações de Pessoa (PessoaT) deste Usuário também
	 * serão retornadas.
	 * 
	 * @throws SQLException.
	 */

	private UsuarioT resultsetToObjectA(ResultSet rs) throws SQLException {
		UsuarioT usuarioT = null;

		while (rs.next()) {
			usuarioT = new UsuarioT();

			usuarioT.setIdUsuario(rs.getInt("ID_USUARIO"));
			usuarioT.setIdTipoUsuario(rs.getInt("ID_TIPO_USUARIO"));
			usuarioT.setIdPessoa(rs.getInt("ID_PESSOA"));
			usuarioT.setDsLogin(rs.getString("DS_LOGIN"));
			usuarioT.setCdSenha(rs.getString("DS_SENHA"));
			usuarioT.setPrimeiroAcesso(rs.getInt("IN_PRIMEIRO_ACESSO") == 0 ? true
					: false);
			usuarioT.setSituacao(rs.getInt("IN_ATIVO"));
			usuarioT.setIdPessoa(rs.getInt("ID_PESSOA"));
			usuarioT.setIdTipoPessoa(rs.getInt("ID_TIPO_PESSOA"));
			usuarioT.setNmPessoa(rs.getString("NM_PESSOA"));
			usuarioT.setNrFone(rs.getString("NR_FONE"));
			usuarioT.setDsEmail(rs.getString("DS_EMAIL"));
			usuarioT.setNmRua(rs.getString("NM_RUA"));
			usuarioT.setNrImovel(rs.getString("NR_IMOVEL"));
			usuarioT.setNmBairro(rs.getString("NM_BAIRRO"));
			usuarioT.setNmCidade(rs.getString("NM_CIDADE"));
		}

		return usuarioT;
	}

	/*
	 * Objetivo: Método utilizado para mapear dados de um ResultSet (Que
	 * armazena resultados de consultas em uma Base de Dados) em informações de
	 * Usuário (UsuarioT).
	 * 
	 * @param ResultSet.
	 * 
	 * @return List<UsuarioT>. Obs: As informações de Pessoa (PessoaT) destes
	 * Usuários não serão retornadas.
	 * 
	 * @throws SQLException.
	 */

	private List<UsuarioT> resultsetToObjectB(ResultSet rs) throws SQLException {
		List<UsuarioT> listaUsuarioT = new ArrayList<UsuarioT>(0);

		while (rs.next()) {
			UsuarioT usuarioT = new UsuarioT();

			usuarioT.setIdUsuario(rs.getInt("ID_USUARIO"));
			usuarioT.setIdTipoUsuario(rs.getInt("ID_TIPO_USUARIO"));
			usuarioT.setIdPessoa(rs.getInt("ID_PESSOA"));
			usuarioT.setDsLogin(rs.getString("DS_LOGIN"));
			usuarioT.setSituacao(rs.getInt("IN_ATIVO"));

			listaUsuarioT.add(usuarioT);
		}

		return listaUsuarioT;
	}

	public void insert(UsuarioT usuarioT) throws SQLException {
		PreparedStatement pStmt = null;

		try {
			pStmt = connection.prepareStatement(SQL_INSERT);
			pStmt.setObject(1, usuarioT.getIdTipoUsuario());
			pStmt.setObject(2, usuarioT.getIdPessoa());
			pStmt.setObject(3, usuarioT.getDsLogin());
			pStmt.setObject(4, usuarioT.getCdSenha());
			pStmt.setObject(5, usuarioT.getSituacao());

			pStmt.execute();
		} finally {
			DaoUtils.closePreparedStatement(pStmt);
			DaoUtils.closeConnection(connection);
		}
	}

	/*
	 * Objetivo: Método utilizado para atualizar a Senha de um Usuário
	 * (UsuarioT). Obs: As demais informações do Usuário não serão atualizados.
	 * 
	 * @param usuarioT (UsuarioT - cdSenha, idPessoa).
	 * 
	 * @return
	 * 
	 * @throws SQLException.
	 */

	public void updatePassword(UsuarioT usuarioT) throws SQLException {
		PreparedStatement pStmt = null;

		try {
			pStmt = connection.prepareStatement(SQL_UPDATE_PASSWORD);
			pStmt.setObject(1, usuarioT.getCdSenha());
			pStmt.setObject(2, usuarioT.getIdPessoa());

			pStmt.executeUpdate();
		} finally {
			DaoUtils.closePreparedStatement(pStmt);
			DaoUtils.closeConnection(connection);
		}
	}

	/*
	 * Objetivo: Método utilizado para atualizar Senha e Situação (Ativo ou
	 * Inativo) de um Usuário (UsuarioT). Obs: As demais informações do Usuário
	 * não serão atualizados.
	 * 
	 * @param usuarioT (UsuarioT - cdSenha, situacao).
	 * 
	 * @return
	 * 
	 * @throws SQLException.
	 */

	public void update(UsuarioT usuarioT) throws SQLException {
		PreparedStatement pStmt = null;

		try {
			pStmt = connection.prepareStatement(SQL_UPDATE);
			pStmt.setObject(1, usuarioT.getCdSenha());
			pStmt.setObject(2, usuarioT.getSituacao());
			pStmt.setObject(3, usuarioT.getIdUsuario());

			pStmt.executeUpdate();
		} finally {
			DaoUtils.closePreparedStatement(pStmt);
			DaoUtils.closeConnection(connection);
		}
	}

	public void inactivate(UsuarioT usuarioT) throws SQLException {
		PreparedStatement pStmt = null;

		try {
			pStmt = connection.prepareStatement(SQL_INACTIVATE);
			pStmt.setObject(1, usuarioT.getIdUsuario());

			pStmt.executeUpdate();
		} finally {
			DaoUtils.closePreparedStatement(pStmt);
			DaoUtils.closeConnection(connection);
		}
	}
}
